/*
 * This source file was generated by the Gradle 'init' task
 */
package cse311;

import java.io.IOException;
import java.io.PrintStream;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        // Use direct ByteBuffer for memory with 128MB size
        SimpleMemory memory = new SimpleMemory(128 * 1024 * 1024);
        MemoryManager memoryManager = new MemoryManager(memory);
        RV32iCpu cpu = new RV32iCpu(memoryManager);
        ElfLoader elfLoader = new ElfLoader(memoryManager);

        try {
            if (args.length < 1) {
                System.err.println("Error: Please provide an ELF file path as an argument");
                System.exit(1);
            }
            
            // Load ELF file
            long startTime = System.currentTimeMillis();
            elfLoader.loadElf(args[0]);
            long loadTime = System.currentTimeMillis() - startTime;

            // Get entry point
            int entryPoint = elfLoader.getEntryPoint();
            PrintStream output = new PrintStream(System.out, true); // Auto-flush enabled
            output.println("Entry Point: 0x" + Integer.toHexString(entryPoint));
            output.println("ELF loaded in " + loadTime + "ms");
            
            // Optional: Print memory map for debugging
            if (args.length > 1 && args[1].equals("--debug")) {
                output.println(memoryManager.getMemoryMap());
            }

            // Start the CPU
            startTime = System.currentTimeMillis();
            cpu.setProgramCounterEntryPoint(entryPoint);
            cpu.turnOn();

            // The CPU runs in a separate thread, so we don't need to wait for it to finish
            // Add shutdown hook to stop CPU gracefully on JVM exit
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                System.out.println("\nShutting down CPU...");
                cpu.stop();
            }));

        } catch (Exception e) {
            System.err.println("Error running program: " + e.getMessage());
            e.printStackTrace();
        }

    }
}
